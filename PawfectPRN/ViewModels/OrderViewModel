using FirstCode.Helper;
using FirstCode.ViewModels;
using PawfectPRN.Models;
using System.Collections.ObjectModel;
using System.Windows.Input;
using System.Windows;

namespace PawfectPRN.ViewModels
{
    public class OrderViewModel : BaseViewModel
    {
        private ObservableCollection<Order> _orders;

        public ObservableCollection<Order> Orders
        {
            get => _orders;
            set
            {
                _orders = value;
                OnPropertyChanged();
            }
        }

        private Order _textboxitem = new Order();
        public Order textboxitem
        {
            get { return _textboxitem; }
            set
            {
                _textboxitem = value;
                OnPropertyChanged(nameof(textboxitem));
            }
        }

        public ICommand AddOrderCommand { get; }
        public ICommand UpdateOrderCommand { get; }
        public ICommand DeleteOrderCommand { get; }

        public OrderViewModel()
        {
            Orders = new ObservableCollection<Order>();
            LoadOrder();

            AddOrderCommand = new RelayCommand(_ => AddOrder());
            UpdateOrderCommand = new RelayCommand(_ => UpdateOrder());
            DeleteOrderCommand = new RelayCommand(_ => DeleteOrder());
        }

        public void DeleteOrder()
        {
            if (textboxitem == null)
            {
                MessageBox.Show("Vui lòng chọn đơn hàng cần xóa!", "Lỗi", MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }

            var confirmResult = MessageBox.Show("Bạn có chắc chắn muốn xóa đơn hàng này?", "Xác nhận xóa",
                                MessageBoxButton.YesNo, MessageBoxImage.Question);

            if (confirmResult == MessageBoxResult.Yes)
            {
                using (var context = new PawfectprnContext())
                {
                    var orderToDelete = context.Orders.FirstOrDefault(o => o.OrderId == textboxitem.OrderId);

                    if (orderToDelete != null)
                    {
                        context.Orders.Remove(orderToDelete);
                        context.SaveChanges();

                        MessageBox.Show("Xóa đơn hàng thành công!", "Thông báo", MessageBoxButton.OK, MessageBoxImage.Information);

                        // Cập nhật lại UI
                        LoadOrder();
                    }
                    else
                    {
                        MessageBox.Show("Không tìm thấy đơn hàng để xóa!", "Lỗi", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
            }
        }

        public void UpdateOrder()
        {
            if (textboxitem == null || textboxitem.OrderId == 0)
            {
                MessageBox.Show("Vui lòng chọn đơn hàng để cập nhật!", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }

            using (var context = new PawfectprnContext())
            {
                var existingOrder = context.Orders.FirstOrDefault(o => o.OrderId == textboxitem.OrderId);

                if (existingOrder != null)
                {
                    // Kiểm tra có thay đổi không
                    if (existingOrder.OrderDate == textboxitem.OrderDate && existingOrder.Status == textboxitem.Status)
                    {
                        MessageBox.Show("Không có thay đổi nào được thực hiện!", "Notification", MessageBoxButton.OK, MessageBoxImage.Information);
                        return;
                    }

                    existingOrder.OrderDate = textboxitem.OrderDate;
                    existingOrder.Status = textboxitem.Status;

                    context.SaveChanges();

                    MessageBox.Show("Cập nhật đơn hàng thành công!", "Notification", MessageBoxButton.OK, MessageBoxImage.Information);

                    // Cập nhật lại danh sách
                    LoadOrder();
                }
                else
                {
                    MessageBox.Show("Không tìm thấy đơn hàng để cập nhật!", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        private void AddOrder()
        {
            if (textboxitem == null)
            {
                textboxitem = new Order();
            }

            if (textboxitem.OrderDate == default)
            {
                MessageBox.Show("Vui lòng nhập ngày đặt hàng!", "Thông báo", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }

            if (string.IsNullOrWhiteSpace(textboxitem.Status))
            {
                MessageBox.Show("Vui lòng nhập trạng thái đơn hàng!", "Thông báo", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }

            using (var context = new PawfectprnContext())
            {
                int newId = context.Orders.Any() ? context.Orders.Max(o => o.OrderId) + 1 : 1;

                var newOrder = new Order
                {
                    OrderId = newId,
                    OrderDate = textboxitem.OrderDate,
                    Status = textboxitem.Status
                };

                context.Orders.Add(newOrder);
                context.SaveChanges();

                Orders.Add(new Order
                {
                    OrderId = newOrder.OrderId,
                    OrderDate = newOrder.OrderDate,
                    Status = newOrder.Status
                });

                textboxitem = new Order();
                OnPropertyChanged(nameof(textboxitem));
            }
        }

        private void LoadOrder()
        {
            using (var context = new PawfectprnContext())
            {
                Orders = new ObservableCollection<Order>(context.Orders.ToList());
            }
        }
    }
}
